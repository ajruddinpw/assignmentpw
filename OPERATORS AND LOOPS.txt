Q1>>what are the conditional operators in java ? 
In Java, conditional operators are used to evaluate conditions and make decisions. The primary conditional operators in Java are:
1.Conditional (Ternary) Operator (?:):

    Syntax: 'condition ? expression_if_true : expression_if_false'
    It evaluates the condition and returns one of the two expressions based on whether the condition is true or false. For example:
int x = 5;
int y = (x > 0) ? 10 : 20;
// y will be assigned the value 10 because x > 0 is true

2.Logical Operators:

    AND (&&): Returns true if both operands are true.
    OR (||): Returns true if at least one operand is true.
    NOT (!): Returns the opposite of the operand's value.

These operators are used to combine and evaluate boolean expressions. For example:
boolean a = true;
boolean b = false;
boolean resultAnd = a && b; // resultAnd will be false
boolean resultOr = a || b;  // resultOr will be true
boolean resultNotA = !a;    // resultNotA will be false

These conditional operators are essential for controlling the flow of your Java programs based on conditions and making decisions in your code.

Q2>>WHAT ARE THE TYPES OF OPERATORS BASED ON THE NUMBER OF OPERANDS ?
In Java, operators are categorized based on the number of operands they operate on. There are three main categories of operators based on the number of operands:

    Unary Operators:
        Unary operators work with a single operand.
        Common unary operators include:
            Unary Plus (+): Converts its operand to a positive number.
            Unary Minus (-): Negates its operand, changing positive numbers to negative and vice versa.
            Increment (++): Adds one to its operand.
            Decrement (--): Subtracts one from its operand.
            Logical NOT (!): Inverts the boolean value of its operand.

    Binary Operators:
        Binary operators work with two operands.
        Common binary operators include:
            Addition (+): Adds two numbers.
            Subtraction (-): Subtracts one number from another.
            Multiplication (*): Multiplies two numbers.
            Division (/): Divides one number by another.
            Modulus (%): Computes the remainder of a division operation.
            Assignment (=): Assigns a value to a variable.
            Comparison Operators (==, !=, >, <, >=, <=): Compares two values and returns a boolean result.

    Ternary Operator (Conditional Operator):
        The ternary operator is unique in that it takes three operands.
        It has the following syntax: condition ? expression_if_true : expression_if_false.
        It evaluates the condition and returns one of the two expressions based on whether the condition is true or false.

These categories encompass the majority of operators in Java, and they are used for various purposes in programming, such as performing arithmetic operations, making decisions, and assigning values to variables.

Q3>>WHAT IS THE USE OF SWITCH CASE  IN JAVA PROGRAMMING?
The switch statement in Java is used for flow control and is typically used to make decisions based on the value of a variable or expression. It provides an alternative way to control program flow compared to using multiple if-else if-else statements.

The primary use of the switch statement is to simplify code that involves multiple conditional branches, where you want to perform different actions depending on the value of a single variable or expression. Here are its key features and use cases:

   1. Value-Based Branching: The switch statement allows you to test a variable or expression against multiple possible values or cases and execute code associated with the matching case.

   2. Efficiency: It can be more efficient than using a series of if-else if-else statements when dealing with a large number of cases, as it performs a jump to the appropriate case, rather than                             evaluating each condition sequentially.

    3.Readability: In situations where you have several mutually exclusive cases, using switch can make the code more readable and maintainable compared to a long chain of if-else if-else                              statements.

Here's a basic example of how the switch statement is used:
int dayOfWeek = 3;
String dayName;

switch (dayOfWeek) {
    case 1:
        dayName = "Sunday";
        break;
    case 2:
        dayName = "Monday";
        break;
    case 3:
        dayName = "Tuesday";
        break;
    // Add more cases for other days
    default:
        dayName = "Invalid day";
}

System.out.println("Today is " + dayName);

In this example, the value of the dayOfWeek variable is compared to various cases, and the corresponding code block is executed when a match is found. If no match is found, the code within the default case is executed.

It's important to note that the break statement is used to exit the switch statement after a case is matched. If you forget to include break, the program will "fall through" and execute the code for subsequent cases until a break or the end of the switch block is reached.

In summary, the switch statement in Java is a powerful tool for making decisions based on the value of a variable or expression, and it can improve code readability and efficiency in certain situations.

Q4>>WHAT ARE THE PRIORITY LEVELS OF  ARITHMETIC OPERATION IN JAVA?
In Java, arithmetic operations follow a specific order of precedence, which determines the priority levels for evaluating expressions. This order of precedence ensures that calculations are performed in a predictable manner. The priority levels, from highest to lowest, are as follows:

   1. Parentheses: Expressions within parentheses are evaluated first. You can use parentheses to explicitly specify the order of operations. For example, (2 + 3) * 4 will result in 20 because        the addition inside the parentheses is performed first.

   2. Unary Operators: Unary operators, such as unary plus (+) and unary minus (-), are evaluated next. For example, -3 or +5 are unary operations that change the sign of a value.

   3. Multiplication and Division: Multiplication (*) and division (/) operations are evaluated from left to right. If there are multiple multiplication or division operations in an expression, they        are evaluated in the order they appear. For example, 2 * 3 / 4 is evaluated as (2 * 3) / 4 and results in 1.

    4.Modulus: The modulus (%) operator is also evaluated at this level. It calculates the remainder of a division operation. For example, 10 % 3 results in 1 because the remainder of the        division of 10 by 3 is 1.

    5.Addition and Subtraction: Addition (+) and subtraction (-) operations are evaluated from left to right. Like multiplication and division, if there are multiple addition or subtraction       operations in an expression, they are evaluated in the order they appear. For example, 5 + 3 - 2 is evaluated as (5 + 3) - 2 and results in 6.

It's important to note that when operators have the same priority level, they are evaluated from left to right. Additionally, you can use parentheses to override the default order of precedence and ensure that specific operations are evaluated before others.

Here's an example that illustrates the order of precedence:

java

int result = 2 + 3 * 4; // The multiplication is performed first, then addition.
// result is 14, not 20

In this example, the multiplication takes precedence over addition, resulting in the value 14. If you wanted to change the order of evaluation, you could use parentheses to make it explicit:

java

int result = (2 + 3) * 4; // Addition is performed first, then multiplication.
// result is 20

Understanding operator precedence is crucial for writing correct and predictable arithmetic expressions in Java.

Q5>>
WHAT ARE THE CONDITIONAL STATEMENTS AND USE OF CONDITIONAL STATEMENTS IN JAVA?
  Conditional statements in Java are used to control the flow of a program based on certain conditions. They allow you to make decisions in your code by executing different blocks of code depending on whether a condition is true or false. Java provides several types of conditional statements:

    if Statement:
        The if statement is the most basic conditional statement in Java. It executes a block of code if a specified condition is true.
        Example:

        java

    int x = 10;
    if (x > 5) {
        System.out.println("x is greater than 5");
    }

if-else Statement:

    The if-else statement allows you to execute one block of code if a condition is true and another block of code if the condition is false.
    Example:

    java

    int y = 3;
    if (y > 5) {
        System.out.println("y is greater than 5");
    } else {
        System.out.println("y is not greater than 5");
    }

if-else if-else Statement:

    The if-else if-else statement is used when you have multiple conditions to check. It allows you to specify multiple conditions and execute different blocks of code based on which condition is true.
    Example:

    java

    int grade = 75;
    if (grade >= 90) {
        System.out.println("A");
    } else if (grade >= 80) {
        System.out.println("B");
    } else if (grade >= 70) {
        System.out.println("C");
    } else {
        System.out.println("D");
    }

switch Statement:

    The switch statement is used to select one of many code blocks to be executed. It compares the value of an expression to the values specified in different case labels.
    Example:

    java

        int dayOfWeek = 3;
        String dayName;
        switch (dayOfWeek) {
            case 1:
                dayName = "Sunday";
                break;
            case 2:
                dayName = "Monday";
                break;
            // ... (more cases)
            default:
                dayName = "Invalid day";
        }

The use of conditional statements is fundamental in programming because they allow your program to respond dynamically to different situations. You can use them to implement logic for user input validation, make decisions in algorithms, and control the flow of your program. Conditional statements are an essential part of writing robust and flexible Java programs.



Q6>>what is the syntax of if else statement?
The syntax of the if-else statement in Java is as follows:



if (condition) {
    // Code to be executed if the condition is true
} else {
    // Code to be executed if the condition is false
}

Q7>>WHAT ARE THE THREE TYPES OF ITERATIVE STATEMENTS IN JAVA?
In Java, there are three main types of iterative (loop) statements that allow you to repeat a block of code multiple times. These three types of iterative statements are:

    for Loop:
        The for loop is used when you know beforehand how many times you want to execute a block of code.
        It consists of an initialization statement, a condition, and an increment or decrement statement.
        Syntax:

        

for (initialization; condition; update) {
    // Code to be executed repeatedly
}

Example:



    for (int i = 0; i < 5; i++) {
        System.out.println("Iteration: " + i);
    }

while Loop:

    The while loop is used when you want to repeatedly execute a block of code as long as a certain condition is true.
    It only consists of a condition, and the loop continues as long as the condition is true.
    Syntax:

    

while (condition) {
    // Code to be executed repeatedly
}

Example:



    int count = 0;
    while (count < 3) {
        System.out.println("Count: " + count);
        count++;
    }

do-while Loop:

    The do-while loop is similar to the while loop, but it guarantees that the block of code is executed at least once before checking the condition.
    It consists of a block of code and a condition, and the code block is executed first before checking the condition.
    Syntax:

    

do {
    // Code to be executed repeatedly
} while (condition);

Example:



        int num = 5;
        do {
            System.out.println("Number: " + num);
            num--;
        } while (num > 0);

These three types of loops provide different ways to control the repetition of code in your Java programs, depending on your specific requirements and the structure of your data. Each loop has its use cases, and choosing the right one depends on the problem you're trying to solve.


Q8>>WRITE THE DIFFERENCE BETWEEN FOR LOOP AND DO-WHILE LOOP?

The for loop and the do-while loop in Java are both used for repetitive execution of a block of code, but they have some key differences in their structure and behavior. Here are the main differences between the for loop and the do-while loop:

    Initialization and Condition:
        For Loop: The for loop has a built-in initialization statement, a condition, and an update statement, all within its parentheses. These elements are defined together in the loop's header.
        Do-While Loop: The do-while loop doesn't have an initialization statement or an update statement within its structure. It only contains a condition that is checked after the code block is executed at least once.

    Execution Order:
        For Loop: In a for loop, the initialization statement is executed first, followed by the condition check. The loop's code block is executed if the condition is true. After each iteration, the update statement is executed before reevaluating the condition.
        Do-While Loop: In a do-while loop, the code block is executed first, and then the condition is checked. This means that the code block is guaranteed to execute at least once, even if the condition is initially false.

    Use Cases:
        For Loop: The for loop is typically used when you know in advance how many times you want to repeat a block of code and when you have a clear initialization, condition, and update logic. It is commonly used for iterating through arrays and other data structures.
        Do-While Loop: The do-while loop is used when you want to ensure that the code block executes at least once, regardless of the initial condition. It is suitable for situations where you need to prompt the user for input or perform an action before checking a condition.

Here's an example to illustrate the difference:

For Loop:



for (int i = 0; i < 5; i++) {
    System.out.println("For Loop: " + i);
}

Do-While Loop:



int count = 0;
do {
    System.out.println("Do-While Loop: " + count);
    count++;
} while (count < 5);

In the for loop, the initialization, condition, and update are combined within the loop header. In the do-while loop, the code block executes first, and the condition is checked afterward, guaranteeing at least one execution of the code block.

Q8>>WRITE A PROGRAM TO PRINT NUMBERS FROM 1 TO 10 ?
public class PrintNumbers {
    public static void main(String[] args) {
        for (int i = 1; i <= 10; i++) {
            System.out.println(i);
        }
    }
}
















































































